AWSTemplateFormatVersion: '2010-09-09'
Description: AWS CloudFormation Template for GitHub Roles and Policies
Parameters:
  domainName:
    Description: Domain Name
    Type: String
    Default: prod.khismatrao.me
  cloudWatchAgentPolicyArn:
    Description: CloudWatchAgentServerPolicy ARN
    Type: String
    Default: arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy
Resources:
  githubEc2AmiPolicyId:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: github-EC2-AMI
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action:
          - ec2:AttachVolume
          - ec2:AuthorizeSecurityGroupIngress
          - ec2:CopyImage
          - ec2:CreateImage
          - ec2:CreateKeypair
          - ec2:CreateSecurityGroup
          - ec2:CreateSnapshot
          - ec2:CreateTags
          - ec2:CreateVolume
          - ec2:DeleteKeyPair
          - ec2:DeleteSecurityGroup
          - ec2:DeleteSnapshot
          - ec2:DeleteVolume
          - ec2:DeregisterImage
          - ec2:DescribeImageAttribute
          - ec2:DescribeImages
          - ec2:DescribeInstances
          - ec2:DescribeInstanceStatus
          - ec2:DescribeRegions
          - ec2:DescribeSecurityGroups
          - ec2:DescribeSnapshots
          - ec2:DescribeSubnets
          - ec2:DescribeTags
          - ec2:DescribeVolumes
          - ec2:DetachVolume
          - ec2:GetPasswordData
          - ec2:ModifyImageAttribute
          - ec2:ModifyInstanceAttribute
          - ec2:ModifySnapshotAttribute
          - ec2:RegisterImage
          - ec2:RunInstances
          - ec2:StopInstances
          - ec2:TerminateInstances
          Resource: "*"
      Users:
      - ghactions-app
  
  codeDeployEc2S3PolicyId:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: CodeDeploy-EC2-S3
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Action:
          - s3:GetObject
          - s3:ListObject
          Effect: Allow
          Resource:
          - Fn::Sub: arn:aws:s3:::codedeploy.${domainName}/*
          - arn:aws:s3:::aws-codedeploy-us-east-1/*
  
  codeDeployLambdaUpdateFunctionCodePolicyId:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: CodeDeploy-Lambda-UpdateFunctionCode
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Action:
          - lambda:UpdateFunctionCode
          Effect: Allow
          Resource:
            Fn::Sub: arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:*
      Users:
      - ghactions-app
  
  githubS3UploadPolicyId:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: GH-Upload-To-S3
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Action:
          - s3:PutObject
          - s3:GetObject #can be ignored
          - s3:ListObject #can be ignored
          Effect: Allow
          Resource:
            Fn::Sub: arn:aws:s3:::codedeploy.${domainName}/*
      Users:
      - ghactions-app
  
  ec2ExecutionRoleId:
    Type: AWS::IAM::Role
    DependsOn: codeDeployEc2S3PolicyId
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      RoleName: EC2ExecutionRole
      ManagedPolicyArns:
      - Ref: codeDeployEc2S3PolicyId
      - Ref: cloudWatchAgentPolicyArn
      Tags:
      - Key: Name
        Value:
          Fn::Sub: "${AWS::StackName}-EC2ExecutionRoleId"
  
  githubCodeDeployPolicyId:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: GH-Code-Deploy
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action:
          - codedeploy:RegisterApplicationRevision
          - codedeploy:GetApplicationRevision
          - codedeploy:ListApplicationRevisions #can be ignored
          Resource:
          - Fn::Sub: arn:aws:codedeploy:${AWS::Region}:${AWS::AccountId}:application:csye6225-webapp
        - Effect: Allow
          Action:
          - codedeploy:CreateDeployment
          - codedeploy:GetDeployment
          Resource:
          - Fn::Sub: arn:aws:codedeploy:${AWS::Region}:${AWS::AccountId}:deploymentgroup:csye6225-webapp/csye6225-webapp-deployment
        - Effect: Allow
          Action:
          - codedeploy:GetDeploymentConfig
          Resource:
          - Fn::Sub: arn:aws:codedeploy:${AWS::Region}:${AWS::AccountId}:deploymentconfig:CodeDeployDefault.OneAtATime
          - Fn::Sub: arn:aws:codedeploy:${AWS::Region}:${AWS::AccountId}:deploymentconfig:CodeDeployDefault.HalfAtATime
          - Fn::Sub: arn:aws:codedeploy:${AWS::Region}:${AWS::AccountId}:deploymentconfig:CodeDeployDefault.AllAtOnce
      Users:
      - ghactions-app

  dynamoDB:
    Type: AWS::DynamoDB::Table
    Properties:
       TableName: "csye"
       ProvisionedThroughput: 
          ReadCapacityUnits: "5"
          WriteCapacityUnits: "5"
       AttributeDefinitions: 
         - 
           AttributeName: "username"
           AttributeType: "S"
         - 
           AttributeName: "token"
           AttributeType: "S"           
       TimeToLiveSpecification:
           AttributeName: "TimeToLive"
           Enabled: TRUE
       KeySchema: 
         - 
           AttributeName: "username"
           KeyType: "HASH" 
         - 
           AttributeName: "token"
           KeyType: "RANGE"
       Tags:
        - Key: Name
          Value:
            Fn::Sub: "${AWS::StackName}-dynamoDBTable"

  DynamoDBPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: DynamoDBPolicy
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - dynamodb:PutItem
              - dynamodb:GetItem
            Resource:
              #- !GetAtt DynamoDB.Arn
              - arn:aws:dynamodb:us-east-1:820852419355:table/csye
      Roles:
        - !Ref lambdaExecutionRole
        - !Ref ec2ExecutionRoleId

  lambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action: sts:AssumeRole
      Path: "/"
      RoleName: LambdaExecutionRole
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Tags:
      - Key: Name
        Value:
          Fn::Sub: "${AWS::StackName}-lambdaExecutionRole"
  
  lambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: csye6225
      Code:
        S3Bucket:
          Fn::Sub: codedeploy.${domainName}
        S3Key: SNS.zip
      Handler: index.handler
      Environment:
        Variables:
          domain:
            Ref: domainName
          table:
            Ref: dynamoDB

      Role:
        Fn::GetAtt:
        - lambdaExecutionRole
        - Arn
      Runtime: nodejs14.x
      MemorySize: 128
      Timeout: 180
      # ReservedConcurrentExecutions: 5
      Tags:
      - Key: Name
        Value:
          Fn::Sub: "${AWS::StackName}-Email"
      - Key: Application Role
        Value: Email Lambda
  
  topic:
    Type: AWS::SNS::Topic
    DependsOn: lambdaFunction
    Properties:
      Subscription:
      - Endpoint:
          Fn::GetAtt:
          - lambdaFunction
          - Arn
        Protocol: lambda
      TopicName: email
  
  lambdaPermission:
    Type: AWS::Lambda::Permission
    DependsOn: lambdaFunction
    Properties:
      FunctionName:
        Ref: lambdaFunction
      Action: lambda:InvokeFunction
      Principal: sns.amazonaws.com
      SourceArn:
        Ref: topic
  
  lambdaPolicy:
    Type: AWS::IAM::ManagedPolicy
    DependsOn: topic
    Properties:
      ManagedPolicyName: lambdaPolicy
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Sid: LambdaDynamoDBAccess
          Effect: Allow
          Action:
          - dynamodb:GetItem
          - dynamodb:PutItem
          - dynamodb:UpdateItem
          Resource:
            - arn:aws:dynamodb:us-east-1:820852419355:table/csye

        - Sid: Logs
          Effect: Allow
          Action:
          - logs:CreateLogGroup
          Resource:
            - arn:aws:ses:us-east-1:820852419355:identity/*
        
        - Sid: LogCreation
          Effect: Allow
          Action:
          - logs:CreateLogStream
          - logs:PutLogStream
          Resource:
            - arn:aws:logs:us-east-1:820852419355:log-group:/aws/lambda/csye6225-spring2022-logs:*

        - Sid: LambdaSESAccess
          Effect: Allow
          Action:
          - ses:VerifyEmailAddress
          - ses:SendEmail
          - ses:SendRawEmail
          Resource:
            - arn:aws:ses:us-east-1:820852419355:identity/*
        - Sid: LambdaS3Access
          Effect: Allow
          Action:
          - s3:GetObject
          Resource:
            - arn:aws:s3:::codedeploy.${domainName}/*
        - Sid: LambdaSNSAccess
          Effect: Allow
          Action:
          - sns:ConfirmSubscription
          Resource: !Ref topic
      Roles:
      - Ref: lambdaExecutionRole
  
  topicPolicy:
    Type: AWS::IAM::ManagedPolicy
    DependsOn: topic
    Properties:
      ManagedPolicyName: EC2TopicAccessPolicy
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Sid: AllowEC2ToPublishToSNSTopic
          Effect: Allow
          Action:
          - sns:Publish
          - sns:CreateTopic
          Resource:
            Ref: topic
      Roles:
      - Ref: ec2ExecutionRoleId

  keyForRDSEncryption:
    Type: 'AWS::KMS::Key'
    Properties:
      Description: RDS key for encryption
      #EnableKeyRotation: true
      PendingWindowInDays: 10
      KeyPolicy:
        Version: 2012-10-17
        Statement:
        - Sid: Enable IAM User Permissions
          Effect: Allow
          Principal:
            AWS: 'arn:aws:iam::820852419355:root'
          Action: 'kms:*'
          Resource: '*'
        - Sid: Allow administration of the key
          Effect: Allow
          Principal:
            AWS: 
            - 'arn:aws:iam::820852419355:user/Vaishu_Prod'
            - 'arn:aws:iam::820852419355:role/aws-service-role/autoscaling.amazonaws.com/AWSServiceRoleForAutoScaling'
          Action:
          - 'kms:Create*'
          - 'kms:Describe*'
          - 'kms:Enable*'
          - 'kms:List*'
          - 'kms:Put*'
          - 'kms:Update*'
          - 'kms:Revoke*'
          - 'kms:Disable*'
          - 'kms:Get*'
          - 'kms:Delete*'
          - 'kms:ScheduleKeyDeletion'
          - 'kms:CancelKeyDeletion'
          Resource: '*'
        - Sid: Allow use of the key
          Effect: Allow
          Principal:
            AWS: 
            - 'arn:aws:iam::820852419355:user/Vaishu_Prod'
            - 'arn:aws:iam::820852419355:role/aws-service-role/autoscaling.amazonaws.com/AWSServiceRoleForAutoScaling'
            - 'arn:aws:iam::820852419355:root'
          Action:
          - 'kms:DescribeKey'
          - 'kms:Encrypt'
          - 'kms:Decrypt'
          - 'kms:ReEncrypt*'
          - 'kms:GenerateDataKey'
          - 'kms:GenerateDataKeyWithoutPlaintext'
          Resource: '*'
        - Sid: Allow attachment of persistent resources
          Effect: Allow
          Principal:
            AWS:
            - 'arn:aws:iam::820852419355:user/Vaishu_Prod'
            - 'arn:aws:iam::820852419355:role/aws-service-role/autoscaling.amazonaws.com/AWSServiceRoleForAutoScaling'
            - 'arn:aws:iam::820852419355:root'
          Action:
          - kms:CreateGrant
          - kms:ListGrants
          - kms:RevokeGrant
          Resource: "*"
          Condition:
            Bool:
              kms:GrantIsForAWSResource: 'true'
      Tags:
      - Key: Name
        Value:
          Fn::Sub: "${AWS::StackName}-keyForRDSEncryption"

  keyForEC2Encryption:
    Type: 'AWS::KMS::Key'
    Properties:
      Description: EC2 key for encryption
      #EnableKeyRotation: true
      PendingWindowInDays: 10
      KeyPolicy:
        Version: 2012-10-17
        Statement:
        - Sid: Enable IAM User Permissions
          Effect: Allow
          Principal:
            AWS: 'arn:aws:iam::820852419355:root'
          Action: 'kms:*'
          Resource: '*'
        - Sid: Allow administration of the key
          Effect: Allow
          Principal:
            AWS: 
            - 'arn:aws:iam::820852419355:user/Vaishu_Prod'
            - 'arn:aws:iam::820852419355:role/aws-service-role/autoscaling.amazonaws.com/AWSServiceRoleForAutoScaling'
          Action:
          - 'kms:Create*'
          - 'kms:Describe*'
          - 'kms:Enable*'
          - 'kms:List*'
          - 'kms:Put*'
          - 'kms:Update*'
          - 'kms:Revoke*'
          - 'kms:Disable*'
          - 'kms:Get*'
          - 'kms:Delete*'
          - 'kms:ScheduleKeyDeletion'
          - 'kms:CancelKeyDeletion'
          Resource: '*'
        - Sid: Allow use of the key
          Effect: Allow
          Principal:
            AWS: 
            - 'arn:aws:iam::820852419355:user/Vaishu_Prod'
            - 'arn:aws:iam::820852419355:role/aws-service-role/autoscaling.amazonaws.com/AWSServiceRoleForAutoScaling'
            - 'arn:aws:iam::820852419355:root'
          Action:
          - 'kms:DescribeKey'
          - 'kms:Encrypt'
          - 'kms:Decrypt'
          - 'kms:ReEncrypt*'
          - 'kms:GenerateDataKey'
          - 'kms:GenerateDataKeyWithoutPlaintext'
          Resource: '*'
        - Sid: Allow attachment of persistent resources
          Effect: Allow
          Principal:
            AWS:
            - 'arn:aws:iam::820852419355:user/Vaishu_Prod'
            - 'arn:aws:iam::820852419355:role/aws-service-role/autoscaling.amazonaws.com/AWSServiceRoleForAutoScaling'
            - 'arn:aws:iam::820852419355:root'
          Action:
          - kms:CreateGrant
          - kms:ListGrants
          - kms:RevokeGrant
          Resource: "*"
          Condition:
            Bool:
              kms:GrantIsForAWSResource: 'true'
      Tags:
      - Key: Name
        Value:
          Fn::Sub: "${AWS::StackName}-keyForEC2Encryption"

Outputs:
  ec2ExecutionRoleId:
    Description: EC2 Execution Role logical Id
    Value:
      Ref: ec2ExecutionRoleId
    Export:
      Name:
        Fn::Sub: "${AWS::StackName}-ec2ExecutionRoleId"
  
  ec2ExecutionRoleArn:
    Description: EC2 Execution Role Arn
    Value:
      Fn::GetAtt:
      - ec2ExecutionRoleId
      - Arn
    Export:
      Name:
        Fn::Sub: "${AWS::StackName}-ec2ExecutionRoleArn"
