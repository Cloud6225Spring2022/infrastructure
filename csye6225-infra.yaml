AWSTemplateFormatVersion: 2010-09-09

Description: This template creates VPC with public subnets each in three availability zones with CIDR blocks route tables directed to the internet gateway  

Metadata:
  AWS::CloudFormation::Interface: 
    ParameterGroups:
      - 
        Label: 
          default: "VPC CIDR"
        Parameters: 
          - VPCCIDRDEV
      - 
        Label: 
          default: "Subnet CIDR"
        Parameters:
          - PublicSubnet1CIDRDEV
          - PublicSubnet2CIDRDEV
          - PublicSubnet3CIDRDEV
      - 
        Label: 
          default: "SSH CIDR"
        Parameters: 
          - SSHLocation

Parameters:
  VPCCIDRDEV:
    Default: 10.0.0.0/16
    Description: Please enter Ip range for this VPC
    Type: String

  PublicSubnet1CIDRDEV:
    Default: 10.0.0.0/24
    Description: Please enter Ip range for this VPC
    Type: String

  PublicSubnet2CIDRDEV:
    Default: 10.0.1.0/24
    Description: Please enter Ip range for this VPC
    Type: String

  PublicSubnet3CIDRDEV:
    Default: 10.0.2.0/24
    Description: Please enter Ip range for this VPC
    Type: String

  SSHLocation:
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
    Default: 0.0.0.0/0
    Description: The IP address range that can be used to access the web server using SSH.
    MaxLength: '18'
    MinLength: '9'
    Type: String

Resources:
# Create VPC
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VPCCIDRDEV
      EnableDnsHostnames: true
      EnableDnsSupport: true
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-VPC

# Create Internet Gateway
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-IGW

# Attach Internet Gateway to VPC
  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

# Create Public Subnet1
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: !Ref PublicSubnet1CIDRDEV
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-PublicSubnet1
      VpcId: !Ref VPC

# Create Public Subnet2
  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      CidrBlock: !Ref PublicSubnet2CIDRDEV
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-PublicSubnet2
      VpcId: !Ref VPC


# Create Public Subnet3
  PublicSubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [ 2, !GetAZs '' ]
      CidrBlock: !Ref PublicSubnet3CIDRDEV
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-PublicSubnet3
      VpcId: !Ref VPC

# Create Route Table
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-Public Route Table
      VpcId: !Ref VPC

# Add Public Route to the Route Table
  PublicRoute:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
      RouteTableId: !Ref PublicRouteTable

# Associate Public Subnet1 with Public Route Table
  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1

# Associate Public Subnet2 with Public Route Table
  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2

# Associate Public Subnet3 with Public Route Table
  PublicSubnet3RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet3

# Create Security Group for the Bastion Host aka Jump Box
  SSHSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: SSH Security Group
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref SSHLocation
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-SSH Security Group
      VpcId: !Ref VPC

Outputs:
# Export VPC ID
  VPC:
    Description: VPC ID
    Export:
      Name: !Sub ${AWS::StackName}-VPC
    Value: !Ref VPC

# Export Public Subnet 1 
  PublicSubnet1:
    Description: Public Subnet 1 ID
    Export:
      Name: !Sub ${AWS::StackName}-PublicSubnet1
    Value: !Ref PublicSubnet1

# Export Public Subnet 2
  PublicSubnet2:
    Description: Public Subnet 2 ID
    Export:
      Name: !Sub ${AWS::StackName}-PublicSubnet2
    Value: !Ref PublicSubnet2

# Export Public Subnet 3
  PublicSubnet3:
    Description: Public Subnet 3 ID
    Export:
      Name: !Sub ${AWS::StackName}-PublicSubnet3
    Value: !Ref PublicSubnet3

